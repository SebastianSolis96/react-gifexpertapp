{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAEC,GAIzB,OAFAC,QAAQC,IAAIF,GAGR,sBAAKG,UAAU,yCAAf,UACI,qBAAKC,IAAMJ,EAAMd,IAAMmB,IAAML,EAAMJ,QACnC,4BAAKI,EAAMJ,YCJVU,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNgB,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAW,WACP3B,EAASC,GACJ2B,MAAM,SAAAjB,GACHe,EAAS,CACLlB,KAAMG,EACNa,SAAS,SAGtB,CAACvB,IAEGwB,EDZ2BI,CAAc5B,GAAlCa,EAHuB,EAG7BN,KAAcgB,EAHe,EAGfA,QAQtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDnB,IAElDuB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQN,EAAOJ,KAAK,SAAAC,GAAG,OACX,aADiB,CAChB,EAAD,eAESA,GADCA,EAAIC,aEUvBkB,EAhCM,WAAM,MAGa3C,mBAAS,CAAC,WAHvB,mBAGhB4C,EAHgB,KAGJ7C,EAHI,KAUvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,aAF0B,CAEzB,EAAD,CAEIA,SAAWA,GADJA,Y,MClBnC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.96a8c2a2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); /* Para prevenir acciones por defecto */\r\n        \r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async( category ) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=VHgb3D7UqOFz7uVukmUssmeiOuAJ4kJt`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( props ) => { /* Como en el componente padre de este puse { ...img } ya no tengo que recibir uno a uno las props sino puedo solo escribir la palabra */\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ props.url } alt={ props.title } />\r\n            <p>{ props.title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    // useEffect( () => { /* Para que una parte de mi código se ejecute una sola vez 'con el [] vacío' */\r\n    //     getGifs( category )\r\n    //         .then( setImages );\r\n    // }, [ category ]) /* Si la categoria cambia y ya no es [], se ejecuta este useEffect */\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce\">{ category }</h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            \r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => ( /* Para recorrer el arreglo */\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img } /* Para enviar todas las propiedades a otro componente y no escribir todas las propiedas en el otro componente */\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => { \r\n        getGifs( category )\r\n            .then( img => {\r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                })\r\n            });\r\n    }, [category]) \r\n\r\n    return state; /* { data: [], loading: true } */\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['Terror', 'Acción', 'Comedia'] /* Esto se hace solo si nunca va a cambiar */\r\n    const [categories, setCategories] = useState(['Terror']); /* Para tener algo dinámico */\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories( ['Romance', ...categories] );\r\n    //     setCategories( cats => [...cats, 'Romance'] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => ( /* Para recorrer el arreglo */\r\n                        // return <li key={ category }> { category } </li> /* Cada hijo necesita un key único */\r\n                        <GifGrid\r\n                            key= { category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from '../src/GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}